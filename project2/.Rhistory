a = c(1,2,3)
names(a) = c("a","b","c")
a
TRUE && sqrt(-1)
a = rep(0, n01)s
stop()
stop()
min(a)
a = lm(height ~ weight, women)
summary(a)$coefficients
summary(a)$coefficients[,4]
summary(a)$coefficients[,4]
summary(a)$coefficients[,4][-1]
a[-1]
a
b
c
e
q
q
rangenorm <- function(x) {
(x - min(x))/(max(x) - min(x))
}
a = 1:10
a
rangenorm()
rangenorm(a)
rangenorm(a)
a=-100:100
a
rangenorm(a)
library(caret)
data(GermanCredit)
Train <- createDataPartition(GermanCredit$Class, p=0.6, list=FALSE)
training <- GermanCredit[ Train, ]
testing <- GermanCredit[ -Train, ]
mod_fit <- train(Class ~ Age + ForeignWorker + Property.RealEstate + Housing.Own +
CreditHistory.Critical,  data=training, method="glm", family="binomial")
exp(coef(mod_fit$finalModel))
predict(mod_fit, newdata=testing)
predict(mod_fit, newdata=testing, type="prob")
mod_fit_one <- glm(Class ~ Age + ForeignWorker + Property.RealEstate + Housing.Own +
CreditHistory.Critical, data=training, family="binomial")
mod_fit_two <- glm(Class ~ Age + ForeignWorker, data=training, family="binomial")
anova(mod_fit_one, mod_fit_two, test ="Chisq")
varImp(mod_fit)
pred = predict(mod_fit, newdata=testing)
accuracy <- table(pred, testing[,"Class"])
sum(diag(accuracy))/sum(accuracy)
pred = predict(mod_fit, newdata=testing)
confusionMatrix(data=pred, testing$Class)
library(pROC)
# Compute AUC for predicting Class with the variable CreditHistory.Critical
f1 = roc(Class ~ CreditHistory.Critical, data=training)
plot(f1, col="red")
setwd("~/github/stat154/project2")
library("e1071")
head(iris,5)
attach(iris)
x <- subset(iris, select=-Species)
y <- Species
svm_model <- svm(Species ~ ., data=iris)
summary(svm_model)
pred <- predict(svm_model1,x)
system.time(pred <- predict(svm_model1,x))
svm_model <- svm(Species ~ ., data=iris)
summary(svm_model)
svm_model1 <- svm(x,y)
summary(svm_model1)
table(pred,y)
pred <- predict(svm_model1,x)
system.time(pred <- predict(svm_model1,x))
table(pred,y)
svm_tune <- tune(svm, train.x=x, train.y=y,
kernel="radial", ranges=list(cost=10^(-1:2), gamma=c(.5,1,2)))
print(svm_tune)
svm_model_after_tune <- svm(Species ~ ., data=iris, kernel="radial", cost=1, gamma=0.5)
summary(svm_model_after_tune)
pred <- predict(svm_model_after_tune,x)
system.time(predict(svm_model_after_tune,x))
table(pred,y)
library(caret)
?createFolds
>createDataPartition()
>createDataPartition?
createDataPartition?
?createDataPartition
seq(1,10)
seq(1,10,11)
seq(1,10,length.out = 5)
library(caret)
data(GermanCredit)
seq(1,10,length.out = 5)Train <- createDataPartition(GermanCredit$Class, p=0.6, list=FALSE)
Train <- createDataPartition(GermanCredit$Class, p=0.6, list=FALSE)
Train
Train=createDataPartition(women$height, p=0.8)
Train
Train=createDataPartition(women$height, p=0.8, list = F)
Train
women[Train]
women[Train,]
women[-Train,]
Train=createDataPartition(women$height, p=0.5, list = F)
Train
women[-Train,]
women[Train,]
Train=createDataPartition(women, p=0.5, list = F)
Train=createDataPartition(nrow(women), p=0.5, list = F)
Train=createDataPartition(1:nrow(women), p=0.5, list = F)
Train
?train
data(GermanCredit)
Train <- createDataPartition(GermanCredit$Class, p=0.6, list=FALSE)
training <- GermanCredit[ Train, ]
testing <- GermanCredit[ -Train, ]
mod_fit <- train(Class ~ Age + ForeignWorker + Property.RealEstate + Housing.Own +
CreditHistory.Critical,  data=training, method="glm", family="binomial")
exp(coef(mod_fit$finalModel))
predict(mod_fit, newdata=testing)
predict(mod_fit, newdata=testing, type="prob")
mod_fit_one <- glm(Class ~ Age + ForeignWorker + Property.RealEstate + Housing.Own +
CreditHistory.Critical, data=training, family="binomial")
mod_fit_two <- glm(Class ~ Age + ForeignWorker, data=training, family="binomial")
anova(mod_fit_one, mod_fit_two, test ="Chisq")
varImp(mod_fit)
pred = predict(mod_fit, newdata=testing)
accuracy <- table(pred, testing[,"Class"])
sum(diag(accuracy))/sum(accuracy)
pred = predict(mod_fit, newdata=testing)
confusionMatrix(data=pred, testing$Class)
library(pROC)
# Compute AUC for predicting Class with the variable CreditHistory.Critical
f1 = roc(Class ~ CreditHistory.Critical, data=training)
plot(f1, col="red")
library(ROCR)
# Compute AUC for predicting Class with the model
prob <- predict(mod_fit_one, newdata=testing, type="response")
pred <- prediction(prob, testing$Class)
perf <- performance(pred, measure = "tpr", x.measure = "fpr")
plot(perf)
auc <- performance(pred, measure = "auc")
auc <- auc@y.values[[1]]
auc
?performance
auc <- performance(pred, measure = "auc")
auc
auc[[1]]
auc@y.values[[1]]
ctrl <- trainControl(method = "repeatedcv", number = 10, savePredictions = TRUE)
mod_fit <- train(Class ~ Age + ForeignWorker + Property.RealEstate + Housing.Own +
CreditHistory.Critical,  data=GermanCredit, method="glm", family="binomial",
trControl = ctrl, tuneLength = 5)
mod_fit$bestTune
mod_fit$metric
install.packages("SparseM")
data(iris)
attach(iris)
x=iris[,1:4]
iris
x
y=factor(iris[,5])
train=sample(1:dim(iris)[1],100)
xTrain=x[train,]
xTest=x[-train,]
yTrain=y[train]
yTest=y[-train]
# Center and scale data
s=scale(xTrain,center=TRUE,scale=TRUE)
# Find the best model with the best cost parameter via 10-fold cross-validations
tryTypes=c(0:7)
tryTypes
tryCosts=c(1000,1,0.001)
tryCosts
bestCost=NA
bestAcc=0
bestType=NA
for(ty in tryTypes){
for(co in tryCosts){
acc=LiblineaR(data=s,target=yTrain,type=ty,cost=co,bias=1,cross=5,verbose=FALSE)
cat("Results for C=",co," : ",acc," accuracy.\n",sep="")
if(acc>bestAcc){
bestCost=co
bestAcc=acc
bestType=ty
}
}
}
install.packages("LiblineaR")
library(LiblineaR)
data(iris)
for(ty in tryTypes){
for(co in tryCosts){
acc=LiblineaR(data=s,target=yTrain,type=ty,cost=co,bias=1,cross=5,verbose=FALSE)
cat("Results for C=",co," : ",acc," accuracy.\n",sep="")
if(acc>bestAcc){
bestCost=co
bestAcc=acc
bestType=ty
}
}
}
tryCosts
duplicated
women
duplicated(women)
a = rbind(women, women)
a
duplicated(a)
