rbern(2)
rbinom(1,0.5)
rbinom(5,1,0.5)
rbinom(5,1,0.5)
rbinom(5,1,0.5)
rbinom(5,1,0.5)
rbinom(x = 5,size = 1,p = 0.5)
rbinom(x = 5,size = 1,prob = 0.5)
rbinom(5 ,size = 1,prob = 0.5)
install.packages("mvtnorm")
install.packages("MASS")
library(MASS)
Z = rbinom(1000 ,size = 1,prob = 0.5) + 1
Sigma <- matrix(c(10,3,3,2),2,2)
Sigma
mvrnorm(n = 1000, rep(0, 2), Sigma)
mvrnorm(n = 10, rep(0, 2), Sigma)
var(mvrnorm(n = 1000, rep(0, 2), Sigma))
var(mvrnorm(n = 1000, rep(0, 2), Sigma, empirical = TRUE))
Sigma
var(c(1,2,3))
1*2/3
a = I(3)
a
a = diag(3)
a
b=diag(2)
b
b=*2diag(3)
b=2*diag(3)
b
a
c(a,b)
mu = c(0,0)
sig = diag(2)
mvrnorm(1,mu,sig)
X = data.frame(x1, x2)
X = data.frame()
mu1  = c(0,0)
sigma1 = diag(2)
sigma2 = matrix(c(1,0,0,4) , byrow = T)
mu1  = c(0,0)
sigma1 = diag(2)
mu2  = c(1,0)
sigma2 = matrix(c(1,0,0,4) , byrow = T)
sigma2
sigma2 = matrix(c(1,0,0,4) ,2,2 byrow = T)
sigma2 = matrix(c(1,0,0,4) ,2,2, byrow = T)
sigma2
sigma1
mu1
mu2
mvrnorm(1, mu1, sigma1)
mvrnorm(1, mu1, sigma1)
mvrnorm(1, mu1, sigma1)
X = matrix(rep(0, 2000), col=2)
?matrix
X = matrix(rep(0, 2000), ncol=2)
X
sigma2
sigma2[1,]
sigma2[1,1]
for (i in 1:1000) {
if (Z[i] == 1) {
obsev = mvrnorm(1, mu1, sigma1)
X[i,1] = obsev[1]
X[i,2] = obsev[2]
}else if(Z[i] == 2){
obsev = mvrnorm(1, mu2, sigma2)
X[i,1] = obsev[1]
X[i,2] = obsev[2]
}
}
X
kmeans(X)
?keamns
?kmeans
kmeans(X, centers = 2)
kmeans(X, centers = 2)$centers
?plot
plot(X, col = output1$cluster)
output1 = kmeans(X, centers = 2)
centers = output1$centers
plot(X, col = output1$cluster)
plot(X, col = output1$cluster+1)
plot(X, col = Z)
plot(X, col = Z)
output1 = kmeans(X, centers = 2)
centers = output1$centers
plot(X, col = output1$cluster+1)
plot(X, col = Z)
library(Mclust)
install.packages("Mclust")
install.packages("mclust")
library(mclust)
?mclust
output2 = Mclust(X, G = 2)
output2
output2$parameters
output2$parameters$mean
output2$data
output2
output2$classification
plot(X, col = output2$classification+1)
plot(a, normal(a, 0, 1), type='l' )
a = seq(-5,5,0.1)
normal = function(x, mean, sd){
nr = (1/sqrt(2*pi*sd^2)) * exp(1)^(-(x-mean)^2/(2*sd^2))
return (nr)
}
plot(a, normal(a, 0, 1), type='l' )
x = seq(-5, 25, 0.1)
u = c(5, 10 ,15)
sd = 2
weights = c(1/3,1/3,1/3)
y = 1/3*normal(x, 5, sd) + 1/3*normal(x, 10, sd) + 1/3*normal(x, 15, sd)
plot(x, y, type='l' )
plot(X, col = Z+1)
View(X)
library(MASS)
Z = rbinom(1000 ,size = 1,prob = 0.5) + 1
X = matrix(rep(0, 2000), ncol=2)
mu1  = c(0,0)
sigma1 = diag(2)
mu2  = c(1,0)
sigma2 = matrix(c(1,0,0,2) ,2,2, byrow = T)
for (i in 1:1000) {
if (Z[i] == 1) {
obsev = mvrnorm(1, mu1, sigma1)
X[i,1] = obsev[1]
X[i,2] = obsev[2]
}else if(Z[i] == 2){
obsev = mvrnorm(1, mu2, sigma2)
X[i,1] = obsev[1]
X[i,2] = obsev[2]
}
}
plot(X, col = Z+1)
output1 = kmeans(X, centers = 2)
centers = output1$centers
plot(X, col = output1$cluster+1)
library(mclust)
output2 = Mclust(X, G = 2)
output2$parameters$mean
plot(X, col = output2$classification+1)
knitr::opts_chunk$set(echo = TRUE)
library(mclust)
library(MASS)
Z = rbinom(1000 ,size = 1,prob = 0.5) + 1
X = matrix(rep(0, 2000), ncol=2)
mu1  = c(0,0)
sigma1 = diag(2)
mu2  = c(1,0)
sigma2 = matrix(c(1,0,0,2) ,2,2, byrow = T)
for (i in 1:1000) {
if (Z[i] == 1) {
obsev = mvrnorm(1, mu1, sigma1)
X[i,1] = obsev[1]
X[i,2] = obsev[2]
}else if(Z[i] == 2){
obsev = mvrnorm(1, mu2, sigma2)
X[i,1] = obsev[1]
X[i,2] = obsev[2]
}
}
plot(X, col = Z+1, main = "Original")
points(x = 0, y =0 , col = "blue", bg="blue", pch=21)
points(x = 1, y =0 , col = "blue", bg="blue", pch=21)
output1 = kmeans(X, centers = 2)
centers = output1$centers
plot(X, col = output1$cluster+1, main="K-mean")
points(centers, col = "blue", bg="blue", pch=21)
output2 = Mclust(X, G = 2)
print("EM centers")
output2$parameters$mean
plot(X, col = output2$classification+1, main = "EM")
points(output2$parameters$mean, col = "blue", bg="blue", pch=21)
Z = rbinom(1000 ,size = 1,prob = 0.5) + 1
X = matrix(rep(0, 2000), ncol=2)
mu1  = c(0,0)
sigma1 = diag(2)
mu2  = c(1,0)
sigma2 = matrix(c(1,0,0,2) ,2,2, byrow = T)
for (i in 1:1000) {
if (Z[i] == 1) {
obsev = mvrnorm(1, mu1, sigma1)
X[i,1] = obsev[1]
X[i,2] = obsev[2]
}else if(Z[i] == 2){
obsev = mvrnorm(1, mu2, sigma2)
X[i,1] = obsev[1]
X[i,2] = obsev[2]
}
}
plot(X, col = Z+1, main = "Original")
points(x = 0, y =0 , col = "blue", bg="blue", pch=21)
points(x = 1, y =0 , col = "blue", bg="blue", pch=21)
output1 = kmeans(X, centers = 2)
centers = output1$centers
plot(X, col = output1$cluster+1, main="K-mean")
points(centers, col = "blue", bg="blue", pch=21)
output2 = Mclust(X, G = 2)
print("EM centers")
output2$parameters$mean
plot(X, col = output2$classification+1, main = "EM")
points(output2$parameters$mean, col = "blue", bg="blue", pch=21)
output2 = Mclust(X, G = 2)
print("EM centers")
output2$parameters$mean
plot(X, col = output2$classification+1, main = "EM")
points(output2$parameters$mean, col = "blue", bg="blue", pch=21)
knitr::opts_chunk$set(echo = TRUE)
library(mclust)
library(MASS)
Z = rbinom(1000 ,size = 1,prob = 0.5) + 1
X = matrix(rep(0, 2000), ncol=2)
mu1  = c(0,0)
sigma1 = diag(2)
mu2  = c(1,0)
sigma2 = matrix(c(1,0,0,2) ,2,2, byrow = T)
for (i in 1:1000) {
if (Z[i] == 1) {
obsev = mvrnorm(1, mu1, sigma1)
X[i,1] = obsev[1]
X[i,2] = obsev[2]
}else if(Z[i] == 2){
obsev = mvrnorm(1, mu2, sigma2)
X[i,1] = obsev[1]
X[i,2] = obsev[2]
}
}
plot(X, col = Z+1, main = "Original")
points(x = 0, y =0 , col = "blue", bg="blue", pch=21)
points(x = 1, y =0 , col = "blue", bg="blue", pch=21)
output1 = kmeans(X, centers = 2)
centers = output1$centers
plot(X, col = output1$cluster+1, main="K-mean")
points(centers, col = "blue", bg="blue", pch=21)
output2 = Mclust(X, G = 2)
print("EM centers")
output2$parameters$mean
plot(X, col = output2$classification+1, main = "EM")
points(output2$parameters$mean, col = "blue", bg="blue", pch=21)
a = seq(-5,5,0.1)
normal = function(x, mean, sd){
nr = (1/sqrt(2*pi*sd^2)) * exp(1)^(-(x-mean)^2/(2*sd^2))
return (nr)
}
plot(a, normal(a, 0, 1), type='l' )
x = seq(-5, 25, 0.1)
u = c(5, 10 ,15)
sd = 2
weights = c(1/3,1/3,1/3)
y = 1/3*normal(x, 5, sd) + 1/3*normal(x, 10, sd) + 1/3*normal(x, 15, sd)
plot(x, y, type='l' )
install.packages("mclust")
?Mclust
Mclust
library(Mclust)
library(mclust)
?mclust
data(faithful)
mod5 <- densityMclust(faithful)
summary(mod5)
plot(mod5, what = "density")
plot(mod5, what = "density", type = "persp")
faithful
plot(faithful)
