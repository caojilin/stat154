t(w) %*% w
w
t(w) %*% w
w %*% solve(t(w) %*% w) %*% t(w)
P
u
w=u$Q
w
t(w) %*% w
W
w
w=2*w
w
t(w) %*% w
knitr::opts_chunk$set(echo = TRUE)
library(mosaic)
library(pracma)
library (MASS)
library(MASS)
nrow(Boston)
ncol(Boston)
?Boston
pairs(Boston)
pairs(bh)
library(mlbench)
data(BostonHousing)
bh = BostonHousing
pairs(bh)
?Boston
View(BostonHousing)
plot(crim ~., data=Boston)
par(mfrow=c(4,4))
plot(crim ~., data=Boston)
Boston[Boston$chas == 1,]
nrow(Boston[Boston$chas == 1,])
Boston$crim
sort(Boston$crim,decreasing = TRUE)
head(sort(Boston$crim,decreasing = TRUE))
head(sort(Boston$tax,decreasing = TRUE))
head(sort(Boston$ptratio,decreasing = TRUE))
plot(Boston$crim)
plot(Boston$tax)
plot(Boston$ptratio)
range(c(-4,2,2,4,5))
# plot(Boston$crim)
# plot(Boston$tax)
# plot(Boston$ptratio)
range(Boston$crim)
range(Boston$tax)
range(Boston$ptratio)
pairs(Boston)
median(Boston$ptratio)
Boston[Boston$chas == 1,]$medv
sort(Boston[Boston$chas == 1,]$medv)
sort(Boston[Boston$chas == 1,]$medv)[1]
sort(Boston[Boston$chas == 1,]$medv)[1]
sort(Boston[Boston$chas == 1,]$medv)[1,]
Boston[Boston$chas == 1,]$medv
temp = Boston[Boston$chas == 1,]
temp
temp[temp$medv == min(temp$medv),]
```{r}
Boston[Boston$medv == min(Boston$medv),]
range(Boston$medv)
Boston[Boston$medv == min(Boston$medv),]
#There are many of the suburbs of Boston appear to have particularly high crime rates, tax rates and Pupil-teacher ratios. Below are the ranges for each variable.
range(Boston$crim)
range(Boston$tax)
range(Boston$ptratio)
range(Boston)
Boston[Boston$rm >7,]
#more than seven
nrow(Boston[Boston$rm >7,])
#more than eight
nrow(Boston[Boston$rm >8,])
Boston[Boston$rm >8,]
range(Boston$ptratio)
range(Boston$age)
range(Boston$nox)
range(Boston$black)
range(Boston$crim)
range(Boston$tax)
plot(Boston$black)
plot(Boston$tax)
range(Boston$medv)
plot(Boston$nox)
Boston[Boston$medv == min(Boston$medv),]
names(Boston)
Boston['crim']
for (i in names(Boston)) {
range(Boston[i])
}
Boston[Boston$medv == min(Boston$medv),]
for (i in names(Boston)) {
range(Boston[i])
}
Boston['crim']
Boston['crim',]
Boston['crim']
range(Boston['crim'])
for (i in names(Boston)) {
print(range(Boston[i]))
}
for (i in names(Boston)) {
print("range",i,range(Boston[i]))
}
print("range of ",i )
for (i in names(Boston)) {
print("range of ",i )
}
for (i in names(Boston)) {
paste0("range of ",i )
}
for (i in names(Boston)) {
paste0("range of ",i )
}
paste0("this is", 5)
paste0("this is ", 5)
Boston[Boston$medv == min(Boston$medv),]
for (i in names(Boston)) {
paste0("range of ",i, range(Boston[i]) )
}
sprintf("range of ",i, range(Boston[i]) )
for (i in names(Boston)) {
sprintf("range of ",i, range(Boston[i]) )
}
for (i in names(Boston)) {
sprintf("range of ",i, range(Boston[i]) )
}
for (i in names(Boston)) {
print(paste0("range of ",i, range(Boston[i])))
}
for (i in names(Boston)) {
print(paste0("range of ",i,, range(Boston[i])))
}
for (i in names(Boston)) {
print(paste0("range of ",i," ", range(Boston[i])))
}
for (i in names(Boston)) {
print(paste0(i, range(Boston[i])))
}
print(paste0('crim', range(Boston['crim'])))
range(Boston['crim'])
for
for (i in names(Boston)) {
for (i in names(Boston)) {
temp = range(Boston['crim'])
print(paste0(i, temp))
}
Boston[Boston$medv == min(Boston$medv),]
range(Boston$tax)
range(Boston$ptratio)
range(Boston$crim)
mean(Boston$crim)
median(Boston$crim)
# plot histogram
library(ggplot2)
?geom_histogram
# 3) Repeat this procedure 100 times and produce a histogram of means and medians on the same plot
repeats <- 100
means <- c()
medians <- c()
for (i in 1:repeats) {
sample <- rnorm(100)
means <- c(means, mean(sample))
medians <- c(medians, median(sample))
}
df <- data.frame(x = c(means, medians), label = c(rep('mean', repeats), rep('median', repeats)))
df
# plot histogram
library(ggplot2)
ggplot(df, aes(x = x, fill = label)) + geom_histogram(alpha =1) + scale_fill_manual(name = 'estimator', values = c('red', 'blue'), labels = c('means', 'medians'))
# 4)
set.seed(123)
n <- 100
x <- rnorm(n)
smp_size <- floor(n*.9)
train_ind <- sample(seq(1:n), smp_size)
smp_size
train_ind
# 5)
ests <- c(mean(train), median(train))
train <- x[train_ind]
val<- x[-train_ind]
# 5)
ests <- c(mean(train), median(train))
mse <- c(mean((val-ests[1]**2)), mean((val-ests[2]**2)))
# 5)
ests <- c(mean(train), median(train))
mse <- c(mean((val-ests[1]**2)), mean((val-ests[2]**2)))
l1err <- c(mean(abs(val - ests[1])**1), mean(abs(val - ests[2])))
mse
l1err
ests
mse
l1err
cut(c(1,2,3))
cut(c(1,2,3),breaks=2)
cut(c(1,2,3),breaks=1)
cut(c(1,2,3),breaks=3)
cut(c(0,1,2,3),breaks=3)
cut(c(0,3),breaks=3)
cut(c(0,3),breaks=3)
# 1)
generate_folds <- function(x, K) {
# randomly shuffles the data
xshuffled <- x[sample(length(x))]
# create 10 equally size folds
folds <- cut(seq(1, length(xshuffled)), breaks = K, labels = FALSE)
return(list('folds' = folds, 'xshuffled'  = xshuffled))
}
n <- 100
x <- rnorm(n)
K <- 10
# 2)
# perform 10 fold cross validation
compute_errors <- function(folds, xshuffled, K, pow = 2) {
err_means <- 0 * c(1:K)
err_medians <- 0 * c(1:K)
for(i in 1:K) {
# segment your data by fold using the which() function
valIndexes <- which(folds==i, labels==TRUE)
valData <- xshuffled[valIndexes]
trainData <- xshuffled[-valIndexes]
err_means[i] <- mean((abs(valData - mean(trainData)))**pow)
err_medians[i] <- mean((abs(valData-mean(trainData)))**pow)
}
return(list('err_means' = err_means, 'err_medians' = err_medians))
}
data <- generate_folds(x, K)
compute_errors(data$folds, data$xshuffled, K)
# 3)
scatter_plot <- function(err_means, err_medians) {
ggplot() + geom_point(aes(x = err_means, y = err_medians)) + geom_abline(slope = 1, intercept = 0)
}
errors <- compute_errors(data$folds, data$xshuffled, K)
?which
which(labels=TRUE)
which(c(1,2,3),labels=TRUE)
data
data$folds
data$xshuffled
# 2)
# perform 10 fold cross validation
compute_errors <- function(folds, xshuffled, K, pow = 2) {
err_means <- 0 * c(1:K)
err_medians <- 0 * c(1:K)
for(i in 1:K) {
# segment your data by fold using the which() function
valIndexes <- which(folds==i)
valData <- xshuffled[valIndexes]
trainData <- xshuffled[-valIndexes]
err_means[i] <- mean((abs(valData - mean(trainData)))**pow)
err_medians[i] <- mean((abs(valData-mean(trainData)))**pow)
}
return(list('err_means' = err_means, 'err_medians' = err_medians))
}
data <- generate_folds(x, K)
compute_errors(data$folds, data$xshuffled, K)
# 3)
scatter_plot <- function(err_means, err_medians) {
ggplot() + geom_point(aes(x = err_means, y = err_medians)) + geom_abline(slope = 1, intercept = 0)
}
errors <- compute_errors(data$folds, data$xshuffled, K)
scatter_plot(errors$err_means, errors$err_medians)
scatter_plot <- function(err_means, err_medians) {
ggplot() + geom_point(aes(x = err_means, y = err_medians)) + geom_abline(slope = 1, intercept = 0)
}
errors
# 2)
# perform 10 fold cross validation
compute_errors <- function(folds, xshuffled, K, pow = 2) {
err_means <- 0 * c(1:K)
err_medians <- 0 * c(1:K)
for(i in 1:K) {
# segment your data by fold using the which() function
valIndexes <- which(folds==i)
valData <- xshuffled[valIndexes]
trainData <- xshuffled[-valIndexes]
err_means[i] <- mean((abs(valData - mean(trainData)))**pow)
err_medians[i] <- mean((abs(valData-median(trainData)))**pow)
}
return(list('err_means' = err_means, 'err_medians' = err_medians))
}
data <- generate_folds(x, K)
compute_errors(data$folds, data$xshuffled, K)
# 3)
scatter_plot <- function(err_means, err_medians) {
ggplot() + geom_point(aes(x = err_means, y = err_medians)) + geom_abline(slope = 1, intercept = 0)
}
errors <- compute_errors(data$folds, data$xshuffled, K)
scatter_plot(errors$err_means, errors$err_medians)
cauchyy
rcauch(100)
rcauchy(100)
max(rcauchy(100))
max(rcauchy(100))
max(rcauchy(100))
max(rcauchy(100))
max(rcauchy(100))
max(rcauchy(100))
max(rcauchy(100))
max(rcauchy(100))
max(rcauchy(100))
max(rcauchy(100))
max(rcauchy(100))
max(rnorm(100))
max(rnorm(100))
max(rnorm(100))
max(rnorm(100))
max(rnorm(100))
mean(rnorm(100))
mean(rnorm(100))
mean(rnorm(100))
mean(rnorm(100))
mean(rnorm(1000))
mean(rnorm(1000))
mean(rnorm(1000))
mean(rcauchy(1000))
mean(rcauchy(1000))
mean(rcauchy(1000))
mean(rcauchy(1000))
mean(rcauchy(1000))
mean(rcauchy(1000))
mean(rcauchy(1000))
mean(rcauchy(1000))
mean(rcauchy(1000))
mean(rcauchy(1000))
mean(rcauchy(1000))
mean(rcauchy(1000))
mean(rcauchy(1000))
mean(rcauchy(1000))
mean(rcauchy(1000))
mean(rcauchy(1000))
mean(rcauchy(1000))
mean(rnorm(1000))
mean(rnorm(1000))
mean(rnorm(1000))
mean(rnorm(1000))
mean(rnorm(1000))
mean(rnorm(1000))
mean(rnorm(1000))
var(rnom(1000))
var(rnorm(1000))
var(rnorm(1000))
var(rnorm(1000))
var(rnorm(1000))
var(rcauchy(1000))
var(rcauchy(1000))
var(rcauchy(1000))
var(rcauchy(1000))
rmvno   r
rnomr(2*3)
rnorm(2*3)
matrix(rnorm(2*3),2,3)
# 2.1.6
m = seq(10,400,10)
m
# 2)
# perform 10 fold cross validation
compute_errors <- function(folds, xshuffled, K, pow = 2) {
err_means <- 0 * c(1:K)
err_medians <- 0 * c(1:K)
for(i in 1:K) {
# segment your data by fold using the which() function
valIndexes <- which(folds==i, arr.ind = TRUE)
valData <- xshuffled[valIndexes]
trainData <- xshuffled[-valIndexes]
err_means[i] <- mean((abs(valData - mean(trainData)))**pow)
err_medians[i] <- mean((abs(valData-median(trainData)))**pow)
}
return(list('err_means' = err_means, 'err_medians' = err_medians))
}
data <- generate_folds(x, K)
compute_errors(data$folds, data$xshuffled, K)
?which
data
which(data$folds == 1)
which(data$folds == 1, arr.ind=TRUE)
which(data$folds == 2, arr.ind=TRUE)
which(data$folds == 2, arr.ind=FALSE)
which(data$folds == 2, arr.ind=FALSE)
which(data$folds == 3, arr.ind=FALSE)
which(data$folds == 3, arr.ind=TRUE)
# 3)
scatter_plot <- function(err_means, err_medians) {
ggplot() + geom_point(aes(x = err_means, y = err_medians)) + geom_abline(slope = 1, intercept = 0)
}
errors <- compute_errors(data$folds, data$xshuffled, K)
scatter_plot(errors$err_means, errors$err_medians)
a = matrix(rnomr(4*4),4,4)
a = matrix(rnorm(4*4),4,4)
a
svd(a)
msv = 1:length(m)
msv
msv = 1:length(m)
# 2.1.6
m = seq(10,400,10)
msv = 1:length(m)
# 2.1.6
m = seq(10,400,10)
msv = 1:length(m)
for (i in m) {
m[i] = svd(matrix(rnorm(m*m),m,m))$d[1]
}
# 2.1.6
m = seq(10,400,10)
msv = 1:length(m)
for (i in m) {
msv[i] = svd(matrix(rnorm(m*m),m,m))$d[1]
}
msv
svd(matrix(rnorm(m*m),m,m))$d[1]
m
# 2.1.6
m = seq(10,400,10)
msv = 1:length(m)
for (i in m) {
msv[i] = svd(matrix(rnorm(i*i),i,i))$d[1]
}
msv
m
svd(matrix(rnorm(10*10),10,10))
a = svd(matrix(rnorm(10*10),10,10))
svd(A)
svd(a)
a
a$d
a$d[1]
msv = 1:length(m)
msv
# 2.1.6
m = seq(10,400,10)
msv = 1:length(m)
for (i in 1:length(m)) {
msv[i] = svd(matrix(rnorm(m[i]*m[i]),m[i],m[i]))$d[1]
}
msv[m]
msv
# 2.1.6
m = seq(10,400,10)
msv = 1:length(m)
for (i in 1:length(m)) {
msv[i] = svd(matrix(rnorm(m[i]*m[i]),m[i],m[i]))$d[1]
}
plot(msv)
# 2.1.6
m = seq(10,400,10)
msv = 1:length(m)
for (i in 1:length(m)) {
msv[i] = svd(matrix(rnorm(m[i]*m[i]),m[i],m[i]))$d[1]
}
plot(msv)
plot(sqrt(msv))
# 2.1.6
m = seq(10,400,10)
msv = 1:length(m)
for (i in 1:length(m)) {
msv[i] = svd(matrix(rnorm(m[i]*m[i]),m[i],m[i]))$d[1]
}
plot(m,msv)
plot(m,sqrt(msv))
# 2.1.6
m = seq(10,400,10)
msv = 1:length(m)
for (i in 1:length(m)) {
msv[i] = svd(matrix(rnorm(m[i]*m[i]),m[i],m[i]))$d[1]
}
plot(m,msv)
plot(sqrt(m),msv)
#2.6
m = 1000
dat = matrix(rnorm(m*m),m,m)
start = Sys.time()
svd(dat)
end = Sys.time()
print(end-start)
#2.6
m = 500
dat = matrix(rnorm(m*m),m,m)
start = Sys.time()
svd(dat)
end = Sys.time()
print(end-start)
#2.6
m = 500
dat = matrix(rnorm(m*m),m,m)
start = Sys.time()
s = svd(dat)
end = Sys.time()
print(end-start)
state.x77
state.x77
state.x77[1:5,]
nrow(state.x77)
ncol(state.x77)
X <- as.matrix(state.x77[1:5,])
rsvd <- svd(X)
dim(rsvd$u)
dim(rsvd$v)
sv = rsvd$d
sv
X <- as.matrix(state.x77[1:5,])
rsvd <- svd(X)
sv = rsvd$d
low = diag(sv[1:3])
approx = rsvd$u %*% low %*% t(rsvd$v)
low
low = diag(c(sv[1:3],0,0))
approx = rsvd$u %*% low %*% t(rsvd$v)
approx
