a = c(1,2,3)
names(a) = c("a","b","c")
a
TRUE && sqrt(-1)
a = rep(0, n01)s
stop()
stop()
min(a)
a = lm(height ~ weight, women)
summary(a)$coefficients
summary(a)$coefficients[,4]
summary(a)$coefficients[,4]
summary(a)$coefficients[,4][-1]
a[-1]
a
b
c
e
q
q
setwd("~/github/stat154/project2")
image1 = read.table("image_data/image1.txt")
View(image1)
?read.table
image1 = read.table("image_data/image1.txt",numerals="no.loss")
View(image1)
View(image1)
str(image1)
str(image1)
print(image1$V7)
print(image1$V7[1])
image1 = read.table("image_data/image1.txt")
print(image1$V7[1])
library(ggplot2)
str(image1)
str(image1$V3)
summary(image1$V3)
table(image1$V3)
ggplot(data=image1) + geom_point(aes(x=V2, y=V1, color=V3))
ggplot(data=image1) + geom_point(aes(x=V2, y=V1, color=V3))
str(image1)
image1$V3 = as.factor(image1$V3)
str(image1)
ggplot(data=image1) + geom_point(aes(x=V2, y=V1, color=V3))
image2 = read.table("image_data/image2.txt",numerals="no.loss")
image2$V3 = as.factor(image2$V3)
image3 = read.table("image_data/image3.txt",numerals="no.loss")
image3$V3 = as.factor(image3$V3)
str(image2)
str(image3)
table(image2$V3)
table(image3$V3)
setwd("~/github/stat154/hw/hw6")
setwd("~/github/stat154/project2")
image1 = read.table("image_data/image1.txt",numerals="no.loss")
View(image1)
summary(image1$V5)
summary(image1$V4)
summary(image1$V4)
scale(image1$V4)
summary*scale(image1$V4))
summary(scale(image1$V4))
ggplot(image1) + geom_point(aes(x=V6, y=V4))
library(ggplot2)
ggplot(image1) + geom_point(aes(x=V6, y=V4))
ggplot(image1) + geom_point(aes(x=V6, y=V4, color=V3))
image1$V3 = as.factor(image1$V3)
ggplot(image1) + geom_point(aes(x=V6, y=V4, color=V3))
?scale
ggplot(image2) + geom_point(aes(x=V6, y=scale(V4), color=V3))
image2 = read.table("image_data/image2.txt",numerals="no.loss")
image2$V3 = as.factor(image2$V3)
ggplot(image2) + geom_point(aes(x=V6, y=scale(V4), color=V3))
a = 1:11
sample(a, size=11*0.2)
sample(a, size=11*0.2)
11*0.2
index = sample(a, 11*0.2)
index
a
a[-index]
a[index]
11*0.2
?sample
womne
women
1:K
predict(1, women)
a = function(x){1?}
?rpart
library(randomForest)
install.packages("titanic")
library(titanic)
titanic_train
log2
log2
log2
log2(4)
?svm
setwd("~/github/stat154/hw/hw6")
knitr::opts_chunk$set(echo = TRUE)
library(ISLR)
library(reshape2)
library(ggplot2)
library(MASS)
library(class)
#a
mpg = Auto$mpg
mpg01 = rep(0, length(mpg))
for (i in 1:length(mpg)) {
mpg01[i] = if(mpg[i] > median(mpg)) 1 else 0
}
dat = data.frame(mpg01 = mpg01, Auto)
#b
pairs(dat)
#c
# split ratio 8:2
set.seed(16)
train_ind <- sample(seq_len(nrow(dat)), size = nrow(dat)*0.8)
train <- dat[train_ind, ]
test <- dat[-train_ind, ]
#d LDA
fit = lda(mpg01 ~ cylinders + year + horsepower + weight + acceleration, data=train)
preds = predict(fit, test)
mean(preds$class != test$mpg01)
#e QDA
fit = qda(mpg01 ~ cylinders +year + horsepower + weight + acceleration, data=train)
preds = predict(fit, test)
mean(preds$class != test$mpg01)
#f logistic regression
fit =  glm(mpg01 ~ cylinders + year + horsepower + weight + acceleration,
family = "binomial", data = train)
preds = predict(fit, test, type = "response")
preds = preds > 0.5
mean(preds != test$mpg01)
#g KNN
set.seed(16)
train.knn <- dat[train_ind, -c(1,2,4,9,10)]
test.knn <- dat[-train_ind, -c(1,2,4,9,10)]
K = 30
test.error = rep(0, K)
for (i in 1:K) {
preds = knn(train.knn, test.knn,
)
test.error[i] = mean(preds != test$mpg01)
}
library(e1071)
knitr::opts_chunk$set(echo = TRUE)
library(ISLR)
library(reshape2)
library(ggplot2)
library(MASS)
library(class)
library(e1071)
#a
mpg = Auto$mpg
mpg01 = rep(0, length(mpg))
for (i in 1:length(mpg)) {
mpg01[i] = if(mpg[i] > median(mpg)) 1 else 0
}
dat = data.frame(mpg01 = mpg01, Auto)
#b
pairs(dat)
#c
# split ratio 8:2
set.seed(16)
train_ind <- sample(seq_len(nrow(dat)), size = nrow(dat)*0.8)
train <- dat[train_ind, ]
test <- dat[-train_ind, ]
#d LDA
fit = lda(mpg01 ~ cylinders + year + horsepower + weight + acceleration, data=train)
preds = predict(fit, test)
mean(preds$class != test$mpg01)
#e QDA
fit = qda(mpg01 ~ cylinders +year + horsepower + weight + acceleration, data=train)
preds = predict(fit, test)
mean(preds$class != test$mpg01)
#f logistic regression
fit =  glm(mpg01 ~ cylinders + year + horsepower + weight + acceleration,
family = "binomial", data = train)
preds = predict(fit, test, type = "response")
preds = preds > 0.5
mean(preds != test$mpg01)
#g KNN
set.seed(16)
train.knn <- dat[train_ind, -c(1,2,4,9,10)]
test.knn <- dat[-train_ind, -c(1,2,4,9,10)]
K = 30
test.error = rep(0, K)
for (i in 1:K) {
preds = knn(train.knn, test.knn,
)
test.error[i] = mean(preds != test$mpg01)
}
knitr::opts_chunk$set(echo = TRUE)
library(ISLR)
library(reshape2)
library(ggplot2)
library(MASS)
library(class)
library(e1071)
#a
mpg = Auto$mpg
mpg01 = rep(0, length(mpg))
for (i in 1:length(mpg)) {
mpg01[i] = if(mpg[i] > median(mpg)) 1 else 0
}
dat = data.frame(mpg01 = mpg01, Auto)
#b
pairs(dat)
#c
# split ratio 8:2
set.seed(16)
train_ind <- sample(seq_len(nrow(dat)), size = nrow(dat)*0.8)
train <- dat[train_ind, ]
test <- dat[-train_ind, ]
#d LDA
fit = lda(mpg01 ~ cylinders + year + horsepower + weight + acceleration, data=train)
preds = predict(fit, test)
mean(preds$class != test$mpg01)
#e QDA
fit = qda(mpg01 ~ cylinders +year + horsepower + weight + acceleration, data=train)
preds = predict(fit, test)
mean(preds$class != test$mpg01)
#f logistic regression
fit =  glm(mpg01 ~ cylinders + year + horsepower + weight + acceleration,
family = "binomial", data = train)
preds = predict(fit, test, type = "response")
preds = preds > 0.5
mean(preds != test$mpg01)
#g KNN
set.seed(16)
train.knn <- dat[train_ind, -c(1,2,4,9,10)]
test.knn <- dat[-train_ind, -c(1,2,4,9,10)]
K = 30
test.error = rep(0, K)
for (i in 1:K) {
preds = knn(train.knn, test.knn, cl=dat[train_ind, "mpg01"], k = i)
test.error[i] = mean(preds != test$mpg01)
}
plot(test.error, x=1:K)
which(test.error == min(test.error))
test.error[8]
?svm
fit = svm(mpg01 ~ cylinders + year + horsepower + weight + acceleration,data=train)
preds = predict(fit, test)
mean(preds == test$mpg01)
preds
fit$labels
fit$fitted
fit = svm(mpg01 ~ cylinders + year + horsepower + weight + acceleration,data=train)
preds = predict(fit, train)
?qda
fit = svm(mpg01 ~ cylinders + year + horsepower + weight + acceleration,data=train)
preds = predict(fit, train)
table(train$mpg01, preds)
?svm
fitted(fit)
preds = preds > 0
preds = predict(fit, train)
preds = preds > 0
table(train$mpg01, preds)
mean(train$mpg01 ==  preds)
#e QDA
fit = qda(mpg01 ~ cylinders +year + horsepower + weight + acceleration, data=train)
preds = predict(fit, train)
mean(preds$class != train$mpg01)
preds = predict(fit, train)
mean(preds$class != train$mpg01)
mean(preds$class == train$mpg01)
preds = predict(fit, train)
mean(preds$class == train$mpg01)
preds = predict(fit, test)
mean(preds$class != test$mpg01)
mean(preds$class == test$mpg01)
preds = predict(fit, train)
mean(preds$class == train$mpg01)
fit = svm(mpg01 ~ cylinders + year + horsepower + weight + acceleration,data=train)
preds = predict(fit, test)
preds = preds > 0
mean(test$mpg01 ==  preds)
?predict
?glm
10^(-1:2)
